package ql_phan_thuong;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PV
 */
public class KhenThuongCuoiNam extends javax.swing.JFrame {

    final String url = "jdbc:mysql://localhost/homework1_db";
    final String user = "root";
    final String password = "";
    
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    public KhenThuongCuoiNam() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Them = new javax.swing.JButton();
        DanhSach = new javax.swing.JButton();
        HoTen = new javax.swing.JTextField();
        Truong = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ConOng = new javax.swing.JTextField();
        ConBa = new javax.swing.JTextField();
        ThanhTich = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        ImageArea = new javax.swing.JLabel();
        PhanQua = new javax.swing.JTextField();
        ChooseFile = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        GiaTri = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        SoLuong = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        Nam = new javax.swing.JTextField();
        Update = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        GioiTinh = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Tuoi = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        DiaChi = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ql_phan_thuong/rw.png"))); // NOI18N
        jLabel1.setText("Khen Thưởng Cuối Năm");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ql_phan_thuong/line.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ql_phan_thuong/line.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Cháu : ");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Trường  : ");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Thành Tích : ");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("Phần Thưởng : ");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setText("Minh Chứng : ");

        Them.setBackground(new java.awt.Color(0, 204, 0));
        Them.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Them.setForeground(new java.awt.Color(255, 255, 255));
        Them.setText("Thêm");
        Them.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThemActionPerformed(evt);
            }
        });

        DanhSach.setBackground(new java.awt.Color(0, 204, 0));
        DanhSach.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        DanhSach.setForeground(new java.awt.Color(255, 255, 255));
        DanhSach.setText("Tra cứu danh sách");
        DanhSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DanhSachActionPerformed(evt);
            }
        });

        HoTen.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        Truong.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel9.setText("Con Ông : ");

        ConOng.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        ConOng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConOngActionPerformed(evt);
            }
        });

        ConBa.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        ConBa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConBaActionPerformed(evt);
            }
        });

        ThanhTich.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setText("Con Bà : ");

        ImageArea.setText("No File Choosed !");

        PhanQua.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImageArea, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
            .addComponent(PhanQua, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ImageArea, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PhanQua, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        ChooseFile.setBackground(new java.awt.Color(0, 204, 0));
        ChooseFile.setForeground(new java.awt.Color(255, 255, 255));
        ChooseFile.setText("Choose File...");
        ChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFileActionPerformed(evt);
            }
        });

        jLabel11.setText("Preview:");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Sản Phẩm được tạo bởi nhóm A+ CNPM CopyRight 2020");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel12.setText("Giá Trị : ");

        GiaTri.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel14.setText("Số lượng :");

        SoLuong.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel15.setText("Năm :");

        Nam.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        Update.setBackground(new java.awt.Color(51, 204, 0));
        Update.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setText("Update từ sheet");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel16.setText("Giới tính :");

        GioiTinh.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        GioiTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GioiTinhActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel17.setText("Tuổi :");

        Tuoi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel18.setText("Địa chỉ :");

        DiaChi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel3)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(Update)
                        .addGap(34, 34, 34)
                        .addComponent(Them)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DanhSach)
                        .addGap(186, 186, 186))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel7))
                                .addGap(8, 8, 8))
                            .addComponent(jLabel8)
                            .addComponent(jLabel6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel15)
                                .addComponent(jLabel4))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel18)
                                .addComponent(jLabel10)))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Nam)
                            .addComponent(jLabel11)
                            .addComponent(ChooseFile)
                            .addComponent(GiaTri)
                            .addComponent(ThanhTich)
                            .addComponent(Truong)
                            .addComponent(ConBa)
                            .addComponent(ConOng)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SoLuong)
                            .addComponent(HoTen)
                            .addComponent(DiaChi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GioiTinh)
                            .addComponent(Tuoi, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Nam, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(GioiTinh)
                                .addGap(6, 6, 6)))
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(79, 79, 79)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(HoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(Tuoi, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConOng, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConBa, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(DiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Truong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ThanhTich, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(ChooseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(GiaTri, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DanhSach)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Them)
                        .addComponent(Update)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFileActionPerformed
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images","jpg","gif","png","PNG");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            ImageArea.setIcon(ResizeImage(path));
            ImageArea.setText("");
        }
        else if(result == JFileChooser.CANCEL_OPTION){
            JOptionPane.showMessageDialog(rootPane, "No File Selected !");
        }
    }//GEN-LAST:event_ChooseFileActionPerformed

    private boolean checkExistEntity(String entity, String column, String table){
        
        try{
            con = DriverManager.getConnection(url, user, password);
            String sql = "SELECT * FROM " + table;
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()){
                if((rs.getString(column)).equals(entity)){
                    return true;
                }
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
            
        }
        return false;
        
    }
    
    private boolean checkSK(String sk, String nam){
        try{
            con = DriverManager.getConnection(url, user, password);
            String sql = "SELECT * FROM Event WHERE Name = ? AND Year = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, sk);
            pst.setString(2, nam);
            ResultSet rs = pst.executeQuery();
            if(rs != null){
                
                return true;
            }
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
            
        }
        
        return false;
    }
    
    private void ThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThemActionPerformed
        if(HoTen.getText().equals("")||GioiTinh.getText().equals("")||
           ConOng.getText().equals("")||ConBa.getText().equals("")||
           Truong.getText().equals("")||ThanhTich.getText().equals("")||
           PhanQua.getText().equals("")||GiaTri.getText().equals("")||
           Tuoi.getText().equals("")){
           JOptionPane.showMessageDialog(rootPane,"Vui Lòng Nhập Đầy Đủ Thông Tin !");
        }
        else if(ImageArea.getIcon()==null){
            JOptionPane.showMessageDialog(rootPane, "Chưa chọn ảnh minh chứng !");
            }
        else{
            
            /*ImageIcon icon = (ImageIcon) ImageArea.getIcon();
            Image minhchung = icon.getImage();
            String picturepath = "src/ql_phan_thuong/Picture/"+Chau.getText()+ConOng.getText()+ConBa.getText()+ "image.jpg";
            File outputfile = new File(picturepath);
            try {
                ImageIO.write(toBufferedImage(minhchung), "jpg", outputfile);
            } catch (IOException ex) {
                Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            String path = "src/ql_phan_thuong/excel/KhenThuongCuoiNam.xlsx";
            try {
                FileInputStream FIS = new FileInputStream(path);
                Workbook workbook = WorkbookFactory.create(FIS);
                Sheet sheet = workbook.getSheetAt(0);
                
                Object[] bookData = {
                    Chau.getText(),ConOng.getText(),
                    ConBa.getText(),TruongLop.getText(),ThanhTich.getText(),picturepath,PhanThuong.getText(),
                    GiaTri.getText()
                };
                int rowCount;
                if(sheet.getLastRowNum()==-1) rowCount=0;
                else rowCount=sheet.getLastRowNum()+1;
                Row row = sheet.createRow(rowCount);
                int columnCount =0;
                Cell cell = row.createCell(columnCount);
                cell.setCellValue(rowCount);
                for(Object field : bookData){
                    cell = row.createCell(++columnCount);
                    if (field instanceof String) {
                        cell.setCellValue((String) field);
                    } else if (field instanceof Integer) {
                        cell.setCellValue((Integer) field);
                    }
                }
                FIS.close();
                FileOutputStream outputStream = new FileOutputStream(path);
                workbook.write(outputStream);
                workbook.close();
                outputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(MidAutumn.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");*/
            try{
                con = DriverManager.getConnection(url, user, password);
                String insert = "";
                String update = "";
                
                if(!(checkSK("Cuối năm học", Nam.getText().trim()))){
                    
                    insert = "INSERT INTO Event(`Name`, `Year`) VALUES (?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, "Cuối năm học");
                    pst.setString(2, Nam.getText().trim());
                    pst.executeUpdate();
                    
                    insert = "INSERT INTO GIFT(`Gift_Name`, `Cost`) VALUES (?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, PhanQua.getText().trim());
                    pst.setString(2, GiaTri.getText().trim());
                    pst.executeUpdate();
                    
                    String select = "SELECT * FROM Event WHERE Event.Year = ?";
                    pst = con.prepareStatement(select);
                    pst.setString(1, Nam.getText().trim());
                    ResultSet rs = pst.executeQuery();
                    
                    insert = "INSERT INTO Family(`Father`, `Mother`, `Address`, `ID_E`)"
                            + "VALUES (?, ?, ?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, ConOng.getText().trim());
                    pst.setString(2, ConBa.getText().trim());
                    pst.setString(3, DiaChi.getText().trim());
                    while(rs.next()){
                        int idEv = rs.getInt("ID");
                        pst.setString(4, Integer.toString(idEv));
                    }
                    pst.executeUpdate();
                    
                    insert = "INSERT INTO Achievement(`Achievement_Name`) VALUES (?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, ThanhTich.getText().trim());
                    pst.executeUpdate();
                    
                    insert = "INSERT INTO Recipient(`Name`, `Age`, `Sex`, `School`, `ID_Family`) "
                            + "VALUES (?, ?, ?, ?, ?)";
                    //String sex = GioiTinh.getSelectedItem().toString().trim();
                    pst = con.prepareStatement(insert);
                    pst.setString(1, HoTen.getText().trim());
                    pst.setString(2, Tuoi.getText().trim());
                    pst.setString(3, GioiTinh.getText().trim());
                    pst.setString(4, Truong.getText().trim());
                    // select id_family to insert
                    String sel = "SELECT * FROM Family "
                            + "WHERE Father like ? AND Mother like ?";
                    PreparedStatement pst2 = con.prepareStatement(sel);
                    pst2.setString(1, ConOng.getText().trim());
                    pst2.setString(2, ConBa.getText().trim());
                    ResultSet idRes = pst2.executeQuery();
                    while(idRes.next()){
                        int idFamily = idRes.getInt("ID");
                        pst.setString(5, Integer.toString(idFamily));
                    }
                    pst.executeUpdate();
                    
                    // add row to Receive_Gift table
                    // get id of recipient
                    String selectID = "SELECT * FROM Recipient, Family "
                            + "WHERE Recipient.ID_Family = Family.ID";
                    pst = con.prepareStatement(selectID);
                    rs = pst.executeQuery();
                    int idRecipient = -1;
                    while (rs.next()){
                        if (rs.getString("Name").equals(HoTen.getText().trim()) 
                                && (rs.getString("Father").equals(ConOng.getText().trim())) 
                                && (rs.getString("Mother").equals(ConBa.getText().trim())) 
                                && (rs.getString("Address").equals(DiaChi.getText().trim()))){
                            idRecipient = rs.getInt("ID");
                        }
                    }
                    int idEvent = -1;
                    int idGift = -1;
                    int idAchievement = -1;
                    // get id of Gift
                    selectID = "SELECT * FROM Gift "
                            + "WHERE Gift.Gift_Name = ?";
                    pst = con.prepareStatement(selectID);
                    pst.setString(1, PhanQua.getText().trim());
                    rs = pst.executeQuery();
                    while(rs.next()){
                        idGift = rs.getInt("ID");
                    }
                    // get id of Event 
                    selectID = "SELECT * FROM Event "
                            + "WHERE Event.Name = ?";
                    pst = con.prepareStatement(selectID);
                    pst.setString(1, "Cuối năm học");
                    rs = pst.executeQuery();
                    while(rs.next()){
                        idEvent = rs.getInt("ID");
                    }
                    // get id of Achievement
                    selectID = "SELECT * FROM Achievement "
                            + "WHERE Achievement.Achievement_Name = ?";
                    pst = con.prepareStatement(selectID);
                    pst.setString(1, ThanhTich.getText().trim());
                    rs = pst.executeQuery();
                    while(rs.next()){
                        idAchievement = rs.getInt("ID");
                    }

                    insert = "INSERT INTO Receive_Gift"
                            + "(`ID_Recipient`, `ID_Gift`, `ID_Event`, `ID_Achievement`, `Quantity`) "
                            + "VALUES (?, ?, ?, ?, ?)";
                    pst = con.prepareStatement(insert);
                    pst.setString(1, Integer.toString(idRecipient));
                    pst.setString(2, Integer.toString(idGift));
                    pst.setString(3, Integer.toString(idEvent));
                    pst.setString(4, Integer.toString(idAchievement));
                    pst.setString(5, SoLuong.getText().trim());
                    pst.executeUpdate();
                    
                    JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
                }
                else{
                    
                    //String sex = GioiTinh.getSelectedItem().toString().trim();
                    if(checkExistEntity(ConOng.getText().trim(), "Father", "Family")){
                        if(checkExistEntity(ConBa.getText().trim(), "Mother", "Family")){
                            if(checkExistEntity(HoTen.getText().trim(), "Name", "Recipient")){
                                
                                String selectID = "SELECT * FROM Family, Recipient, Event "
                                        +"WHERE Family.Father = ? AND Family.Mother = ? "
                                        +"AND Family.ID = Recipient.ID_Family AND Recipient.Name = ? "
                                        +"AND Family.ID_E = Event.ID AND Event.Year = ? AND Event.Name = ? ";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, ConOng.getText().trim());
                                pst.setString(2, ConBa.getText().trim());
                                pst.setString(3, HoTen.getText().trim());
                                pst.setString(4, Nam.getText().trim());
                                pst.setString(5, "Cuối năm học");
                                ResultSet rs = pst.executeQuery();
                                int idEv = 0, idF = 0;
                                while(rs.next()){
                                    int idEv1 = rs.getInt("ID_E");
                                    int idRep1 = rs.getInt("ID");
                                    idEv = idEv1;
                                    idF = idRep1;
                                }
                                selectID = "SELECT * FROM Recipient WHERE Recipient.ID_Family = ? AND Recipient.Name = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, Integer.toString(idF));
                                pst.setString(2, HoTen.getText().trim());
                                rs = pst.executeQuery();
                                int idRep = 0;
                                while(rs.next()){
                                    int idRep1 = rs.getInt("ID");
                                    idRep = idRep1;
                                }
                                
                                selectID = "SELECT * FROM Receive_Gift WHERE Receive_Gift.ID_Recipient = ? AND Receive_Gift.ID_Event = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, Integer.toString(idRep));
                                pst.setString(2, Integer.toString(idEv));
                                rs = pst.executeQuery();
                                int idG = 0;
                                while(rs.next()){
                                    idG = rs.getInt("ID_Gift");
                                }
                                
                                update = "UPDATE Receive_Gift SET Quantity = ? WHERE ID_Recipient = ? AND ID_Event = ?";
                                pst = con.prepareStatement(update);
                                //int sl = (int) SoLuong.getValue();
                                pst.setString(1, SoLuong.getText().trim());
                                pst.setString(2, Integer.toString(idRep));
                                pst.setString(3, Integer.toString(idEv));
                                pst.executeUpdate();
                                
                                //System.out.println("5555");
                                
                                update = "UPDATE Gift SET Gift_Name = ?, Cost = ? WHERE ID = ?";
                                pst = con.prepareStatement(update);
                                pst.setString(1, PhanQua.getText().trim());
                                pst.setString(2, GiaTri.getText().trim());
                                pst.setString(3, Integer.toString(idG));
                                pst.executeUpdate();
                                
                                update = "UPDATE Family SET Address = ? WHERE ID = ? AND ID_E = ?";
                                pst = con.prepareStatement(update);
                                pst.setString(1, DiaChi.getText().trim());
                                pst.setString(2, Integer.toString(idF));
                                pst.setString(3, Integer.toString(idEv));
                                pst.executeUpdate();
                                
                                update = "UPDATE Recipient SET Age = ?, Sex = ?, School = ? WHERE ID = ? AND ID_Family = ?";
                                pst = con.prepareStatement(update);
                                pst.setString(1, Tuoi.getText().trim());
                                pst.setString(2, GioiTinh.getText().trim());
                                pst.setString(3, Truong.getText().trim());
                                pst.setString(4, Integer.toString(idRep));
                                pst.setString(5, Integer.toString(idF));
                                pst.executeUpdate();
                                
                                JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
                                //System.out.println(idRep);
                                //int idEv = rs.getInt("ID_E");
                                
                            }
                            else{
                                String selectID = "SELECT * FROM Family, Event "
                                        +"WHERE Family.Father = ? AND Family.Mother = ? "
                                        +"AND Family.ID_E = Event.ID AND Event.Year = ? AND Event.Name = ? ";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, ConOng.getText().trim());
                                pst.setString(2, ConBa.getText().trim());
                                pst.setString(3, Nam.getText().trim());
                                pst.setString(4, "Cuối năm học");
                                ResultSet rs = pst.executeQuery();
                                int idF = 0, idEv = 0;
                                while(rs.next()){
                                    idF = rs.getInt("ID");
                                    idEv = rs.getInt("ID_E");
                                }
                                
                                insert = "INSERT INTO GIFT(`Gift_Name`, `Cost`) VALUES (?, ?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, PhanQua.getText().trim());
                                pst.setString(2, GiaTri.getText().trim());
                                pst.executeUpdate();
                                
                                insert = "INSERT INTO Achievement(`Achievement_Name`) VALUES (?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, ThanhTich.getText().trim());
                                pst.executeUpdate();
                                
                                insert = "INSERT INTO Recipient(`Name`, `Age`, `Sex`, `School`, `ID_Family`) "
                                        + "VALUES (?, ?, ?, ?, ?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, HoTen.getText().trim());
                                pst.setString(2, Tuoi.getText().trim());
                                pst.setString(3, GioiTinh.getText().trim());
                                pst.setString(4, Truong.getText().trim());
                                pst.setString(5, Integer.toString(idF));
                                pst.executeUpdate();
                                
                                // add row to Receive_Gift table
                                // get id of recipient
                                selectID = "SELECT * FROM Recipient "
                                            + "WHERE Recipient.ID_Family = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, Integer.toString(idF));
                                rs = pst.executeQuery();
                                int idRecipient = -1;
                                while (rs.next()){
                                    idRecipient = rs.getInt("ID");
                                }
                                int idEvent = idEv;
                                int idGift = -1;
                                int idAchievement = -1;
                                // get id of Gift
                                selectID = "SELECT * FROM Gift "
                                            + "WHERE Gift.Gift_Name = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, PhanQua.getText().trim());
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    idGift = rs.getInt("ID");
                                }
                                
                                // get id of Achievement
                                selectID = "SELECT * FROM Achievement "
                                    + "WHERE Achievement.Achievement_Name = ?";
                                pst = con.prepareStatement(selectID);
                                pst.setString(1, ThanhTich.getText().trim());
                                rs = pst.executeQuery();
                                while(rs.next()){
                                    idAchievement = rs.getInt("ID");
                                }

                                insert = "INSERT INTO Receive_Gift"
                                    + "(`ID_Recipient`, `ID_Gift`, `ID_Event`, `ID_Achievement`, `Quantity`) "
                                    + "VALUES (?, ?, ?, ?, ?)";
                                pst = con.prepareStatement(insert);
                                pst.setString(1, Integer.toString(idRecipient));
                                pst.setString(2, Integer.toString(idGift));
                                pst.setString(3, Integer.toString(idEvent));
                                pst.setString(4, Integer.toString(idAchievement));
                                pst.setString(5, SoLuong.getText().trim());
                                pst.executeUpdate();
                    
                                JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");

                            }
                        }  
                    }
                    else if(checkExistEntity(ConOng.getText().trim(), "Father", "Family") == false
                            ||checkExistEntity(ConBa.getText().trim(), "Mother", "Family") == false){
                        
                        String select = "SELECT * FROM Event WHERE Event.Name = ? AND Event.Year = ?";
                        pst = con.prepareStatement(select);
                        pst.setString(1, "Cuối năm học");
                        pst.setString(2, Nam.getText().trim());
                        rs = pst.executeQuery();
                        int idEv = 0;
                        while(rs.next()){
                            idEv = rs.getInt("ID");
                        }
                        
                        insert = "INSERT INTO GIFT(`Gift_Name`, `Cost`) VALUES (?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, PhanQua.getText().trim());
                        pst.setString(2, GiaTri.getText().trim());
                        pst.executeUpdate();
                        
                        insert = "INSERT INTO Family(`Father`, `Mother`, `Address`, `ID_E`)"
                            + "VALUES (?, ?, ?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, ConOng.getText().trim());
                        pst.setString(2, ConBa.getText().trim());
                        pst.setString(3, DiaChi.getText().trim());
                        pst.setString(4, Integer.toString(idEv));
                        pst.executeUpdate();
                        
                        insert = "INSERT INTO Achievement(`Achievement_Name`) VALUES (?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, ThanhTich.getText().trim());
                        pst.executeUpdate();
                        
                        insert = "INSERT INTO Recipient(`Name`, `Age`, `Sex`, `School`, `ID_Family`) "
                            + "VALUES (?, ?, ?, ?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, HoTen.getText().trim());
                        pst.setString(2, Tuoi.getText().trim());
                        pst.setString(3, GioiTinh.getText().trim());
                        pst.setString(4, Truong.getText().trim());
                        // select id_family to insert
                        String sel = "SELECT * FROM Family "
                                + "WHERE Father like ? AND Mother like ? AND ID_E = ?";
                        PreparedStatement pst2 = con.prepareStatement(sel);
                        pst2.setString(1, ConOng.getText().trim());
                        pst2.setString(2, ConBa.getText().trim());
                        pst2.setString(3, Integer.toString(idEv));
                        ResultSet idRes = pst2.executeQuery();
                        while(idRes.next()){
                            int idFamily = idRes.getInt("ID");
                            pst.setString(5, Integer.toString(idFamily));
                        }
                        pst.executeUpdate();
                        
                        // add row to Receive_Gift table
                        // get id of recipient
                        String selectID = "SELECT * FROM Recipient, Family "
                                + "WHERE Recipient.ID_Family = Family.ID";
                        pst = con.prepareStatement(selectID);
                        rs = pst.executeQuery();
                        int idRecipient = -1;
                        while (rs.next()){
                            if (rs.getString("Name").equals(HoTen.getText().trim()) 
                                    && (rs.getString("Father").equals(ConOng.getText().trim())) 
                                    && (rs.getString("Mother").equals(ConBa.getText().trim())) 
                                    && (rs.getString("Address").equals(DiaChi.getText().trim()))){
                                idRecipient = rs.getInt("ID");
                            }
                        }
                        int idEvent = idEv;
                        int idGift = -1;
                        int idAchievement = -1;
                        // get id of Gift
                        selectID = "SELECT * FROM Gift "
                                + "WHERE Gift.Gift_Name = ?";
                        pst = con.prepareStatement(selectID);
                        pst.setString(1, PhanQua.getText().trim());
                        rs = pst.executeQuery();
                        while(rs.next()){
                            idGift = rs.getInt("ID");
                        }
                        
                        // get id of Achievement
                        selectID = "SELECT * FROM Achievement "
                              + "WHERE Achievement.Achievement_Name = ?";
                        pst = con.prepareStatement(selectID);
                        pst.setString(1, ThanhTich.getText().trim());
                        rs = pst.executeQuery();
                        while(rs.next()){
                            idAchievement = rs.getInt("ID");
                        }

                        insert = "INSERT INTO Receive_Gift"
                               + "(`ID_Recipient`, `ID_Gift`, `ID_Event`, `ID_Achievement`, `Quantity`) "
                               + "VALUES (?, ?, ?, ?, ?)";
                        pst = con.prepareStatement(insert);
                        pst.setString(1, Integer.toString(idRecipient));
                        pst.setString(2, Integer.toString(idGift));
                        pst.setString(3, Integer.toString(idEvent));
                        pst.setString(4, Integer.toString(idAchievement));
                        pst.setString(5, SoLuong.getText().trim());
                        pst.executeUpdate();
                        
                        JOptionPane.showMessageDialog(rootPane, "Đã Lưu !");
                    }   
                }
            }
            catch(Exception ex){
    //            JOptionPane.showMessageDialog(rootPane, ex);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_ThemActionPerformed
    public static BufferedImage toBufferedImage(Image img)
{
    if (img instanceof BufferedImage)
    {
        return (BufferedImage) img;
    }

    // Create a buffered image with transparency
    BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

    // Draw the image on to the buffered image
    Graphics2D bGr = bimage.createGraphics();
    bGr.drawImage(img, 0, 0, null);
    bGr.dispose();

    // Return the buffered image
    return bimage;
}
    private void DanhSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DanhSachActionPerformed
        /*KhenThuongCuoiNamList ktcnl = new KhenThuongCuoiNamList();
        ktcnl.setVisible(true);
        ktcnl.setResizable(false);
        ktcnl.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  */
        DisplayDB d = new DisplayDB();
        d.setVisible(true);
    }//GEN-LAST:event_DanhSachActionPerformed

    private void ConBaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConBaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConBaActionPerformed

    private void ConOngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConOngActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConOngActionPerformed

    private void GioiTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GioiTinhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GioiTinhActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        CuoiNam cn = new CuoiNam();
        try {
            cn.TruyCapSheet();
            JOptionPane.showMessageDialog(rootPane, "Đã Update !");
        } catch (IOException ex) {
            Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GeneralSecurityException ex) {
            Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhenThuongCuoiNam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KhenThuongCuoiNam().setVisible(true);
            }
        });
    }
    
    private ImageIcon ResizeImage(String path){
        ImageIcon MinhChung = new ImageIcon(path);
        Image img = MinhChung.getImage();
        Image nwimg = img.getScaledInstance(ImageArea.getWidth(), ImageArea.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image =new ImageIcon(nwimg);
        return image;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseFile;
    private javax.swing.JTextField ConBa;
    private javax.swing.JTextField ConOng;
    private javax.swing.JButton DanhSach;
    private javax.swing.JTextField DiaChi;
    private javax.swing.JTextField GiaTri;
    private javax.swing.JTextField GioiTinh;
    private javax.swing.JTextField HoTen;
    private javax.swing.JLabel ImageArea;
    private javax.swing.JTextField Nam;
    private javax.swing.JTextField PhanQua;
    private javax.swing.JTextField SoLuong;
    private javax.swing.JTextField ThanhTich;
    private javax.swing.JButton Them;
    private javax.swing.JTextField Truong;
    private javax.swing.JTextField Tuoi;
    private javax.swing.JButton Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
